''' New and better documented version of the mer_supp.ipynb file in 2020_cp34h. 

Find kmers that are enriched in a sample or enriched in comparison to another sample. 

kmers = peptide of 1-4 aa in length. 
'''
import numpy as np
import os 
import pandas as pd
import timeit
import datetime
import pdb 

def parseFasta(fasta):
    '''
    Input: file path containing FASTA data in the following format:

    1 >sp|Q489W3|FADB_COLP3
    2 MIYQGKSLSAQLLEDGIVEFKFDAQGSVNKFDQATFEEYIAVVAAINNCSEAKGVIVTSGKSTFIVGADITEFLVSFSQPEDALASWAKKASDVFDSFEDIQLPTIAAINGIALGGGCEMTLACDYRVAATTASIGLPEVKLGLMPGFGGTVRLPRLIGFDNAATWMSTGKAFKPAAALAQGAIDAVVEPENLQAAAISMLKLAIDGKLDWRAKRQPKLEALKLSPTELIMSSTTCKGMIAAKAGKHYPAPMVMINTLIASANLDRTGAMAAENTGFAKLAKTDAATAQIGLFMADQVIKGKAKKASKLATKAVNKAAVLGAGIMGGGIAYQSAYKGTPIIMKDINDQALDLGLTTATGILTKQVERGRMNAKKMAGVLNNITPSLSYDSVKDVDIVVEAVVENPKVKGMVLAEVEGVIGEDAILTSNTSTISIDLLAQSVKRPQNFCGMHFFNPVNKMPLVEVIRGKDTSDETVAAVVAYAAKMGKSPIVVNDCPGFYVNRVLFPYFAGFSQLVLEGADFTAIDKVMEKQFGWPMGPAYLLDVVGVDTADHCTGVMSSGFPTRMKKIDNDPVSTLYANERLGQKNGKGFYDHIKDKRGRPMKVPAPVAYELLGQHCADKKDFSSEEIIARMMIPMVNEVVRCLEEGVVDTAAEADMGLIYGVGFPPFRGGAIRYLETLGLDNFIAMADKYTDLGEIYHVTDGLREMAKSGKSYFTTDVKLA
    3 >sp|Q47UE0|GLMU_COLP3
    4 MSLSVVILAAGKGTRMRSSLPKVLHSVAEKPMVGHVIDSARQLGASNIYVVYGFGGDVLKATLTKDNTGDDLTFVEQVEQLGTGHAVDQASPFLTDDEDVLVLYGDVPLTKVSTLESLLAAKPTDGMALLTVHLANPMGYGRIVRQEISGKQQVVGIIEQKDANEEQLKINEANTGILLANGGDLKRWLSNLSSDNAQGEYYLTDIIAAAHGEGKVVATAHPETEIEVEGANNRVQLATLERAYQARIAEELMIAGASLRDPARIDVRGNLTTGTEVSIDINCIFEGEVSLADNVQIGANCIIKNSTIGANVEIKPNSIIEDTIIEADCSVGPFARLRPGSVMKQDSHVGNFVEMKKTTLGVGSKAGHLSYLGNAEIGTKVNIGAGTITCNYDGVNKSTTEIGDNAFIGSNSSLVAPVIIGNSATVGAGSVISKEVEDNDLALTRAKQRNIAGWQRPVKKS
    5 ...

    returns: 
    DataFrame with 5 columns: 'header', 'status','protein_id','protein_name','peptide' in  long format. 

    '''
    headers = list()
    sequences = list()

    with open (fasta) as f:
        for i, line in enumerate(f): 
            if ">" in line:
                headers.append(line[1:-1])
            elif line.strip() == '':
                print("Empty line", line)
            else:
                sequences.append(line[:-1])

    df = pd.DataFrame(
        {
            'header': headers,
            'peptide': sequences
        }
    )

    #Split up the header
    df[['status', 'protein_id', 'protein_name']] = df['header'].str.split('|', expand=True)
    #Reorder cols for readability
    df = df[['header', 'status','protein_id','protein_name','peptide']]
    
    return df 

def getKmer(df, mers):
    ''' 
    takes dataframe of fasta peptides, list of different k-mer lengths (e.g. [1,4,5])

    Input: Dataframe generated by output from parseFasta(). 

        header                                            peptide                 status protein_id  protein_name
        sp|Q489W3|FADB_COLP3  MIYQGKSLSAQLLEDGIVEFKFDAQGSVNKFDQATFEEYIAVVAAI...     sp     Q489W3    FADB_COLP3
        sp|Q47UE0|GLMU_COLP3  MSLSVVILAAGKGTRMRSSLPKVLHSVAEKPMVGHVIDSARQLGAS...     sp     Q47UE0    GLMU_COLP3
        
     
    Returns: frequency of each peptide k-mer as ordered histogram. 
        dict = {
            MIY: 100
            MSL: 130
            M: 230
            . . . 
        }
    '''
    kmer_frequency = dict()
    # For each peptide in Fasta,
    for peptide in df['peptide'].to_list():

        # For each length k
        for k in mers:
            
            # Create and iterate through sliding window
            for i in range(len(peptide)-k):
                kmer = peptide[i:i+k]

                # add kmer to dictionary
                if kmer in kmer_frequency.keys():
                    kmer_frequency[kmer] += 1 
                else:
                    kmer_frequency[kmer] = 1

    return kmer_frequency

def main():
    ''' Note that initialization reads/files are included in the all_runs csv output.'''

    # Get filepaths for each fasta file in path
    data_path = "../data/TwoPeps"
    filepaths = [os.path.join(data_path, f) for f in os.listdir(data_path)]
    peptide_runs = []

    for i, run in enumerate(filepaths):
        start = timeit.default_timer()
        run_name = run.split('/')[-1][:-6] #Use fasta file as run name
        print(run_name)

        #Call parseFasta to read data and return df. (df is stored temporarily)
        df = parseFasta(run)  

        # Generate kmer frequency for kmers of 2, 3, and 4 k in length. 
        kmer_dict= getKmer(df, [2,3,4])

        # Lazyily convert  into lists for use with dataframe
        kmer = [k for k in list(kmer_dict.keys())]
        count = [c for c in list(kmer_dict.values())]

        # Create another df but only with fasta file name, kmer and count of kmer appearance. 
        peptide_runs.append(pd.DataFrame({'run_name':run_name, 'kmer':kmer,'count':count}))
        print(round(timeit.default_timer() - start, 4), 'seconds')

    # Combine all kmer counts across all runs. 
    df = pd.concat(peptide_runs)

    # Open metadata data. 
    metadata = pd.read_csv('../data/metadata.csv')

    # Reformat names of columns
    metadata.columns = map(str.lower, metadata.columns)

    #  Merge metadata to kmer data on run name. 
    alldf = pd.merge(df, metadata, how='left', left_on='run_name', right_on='sample').reset_index()

    # Write dataframe to csv
    alldf.to_csv(f'../output/{datetime.date.today()}_two_peps_all_runs_1-2-3-4.csv')

if __name__ == '__main__':
    main()